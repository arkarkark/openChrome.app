#!/usr/bin/python
# Copyright 2014 Alex K (wtwf.com)

"""
Open Chrome in a profile based on URL pattern matching, see https://github.com/arkarkark/openChrome.app

Usage: openChrome http://facebook.com/

Set as your default web opener with https://github.com/Lord-Kamina/SwiftDefaultApps/releases

also see https://crbug.com/549275
http://superuser.com/questions/373701/create-bash-script-to-open-url-in-mac-os-x
http://apple.stackexchange.com/questions/32386/how-to-register-an-applescript-as-a-potential...
"""

__author__ = "wtwf.com (Alex K)"

import getopt
import json
import logging
import os
import re
import subprocess
import sys

PROFILE_DIR = "~/Library/Application Support/Google/Chrome"
CHROME_BIN = "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome"
DEFAULT_PROFILE = "Default"


def usage(code, msg=""):
    """Show a usage message."""
    if code:
        out = sys.stderr
    else:
        out = sys.stdout
    PROGRAM = os.path.basename(  # pylint: disable=invalid-name,possibly-unused-variable
        sys.argv[0]
    )
    print >> out, __doc__ % locals()
    if msg:
        print >> out, msg
    sys.exit(code)


def open_url_in_profile(profile, url):
    """Open up a url in a specific profile window"""
    logging.info("profile %s url %s", profile, url)
    subprocess.call([CHROME_BIN, url, "--profile-directory=%s" % profile])
    subprocess.Popen(["open", "-a", "Google Chrome"])  # to get focus


def get_profile_dir_for_email_address(email):
    """A map from email address to profile directory name."""
    for dirname in os.listdir(PROFILE_DIR):
        prefs_file_name = os.path.join(PROFILE_DIR, dirname, "Preferences")
        if os.path.exists(prefs_file_name):
            prefs = json.load(open(prefs_file_name))
            for acct in prefs.get("account_info") or []:
                if acct.has_key("email") and acct["email"] == email:
                    return dirname
    return None


def get_open_chrome_rc():
    """a simple json file with an object (see README.md)."""
    return json.load(open(os.path.expanduser("~/.openchromerc")))


def open_url(url):
    """Choose a profile to open this url in."""
    global PROFILE_DIR, CHROME_BIN

    config = get_open_chrome_rc()

    PROFILE_DIR = os.path.expanduser(config.get("profileDirectory", PROFILE_DIR))
    CHROME_BIN = os.path.expanduser(config.get("chromeBinary", CHROME_BIN))
    if config.has_key("rules"):
        rules = config["rules"]
    else:
        logging.fatal(
            "~/.openchromerc must have `rules`, see https://github.com/arkarkark/openChrome.app"
        )

    profile = None
    rule = None
    for rule in rules:
        pattern = rule.get("pattern")
        if not pattern or re.search(pattern, url, re.VERBOSE | re.IGNORECASE):
            break
        profile = None

    if not rule:
        profile = DEFAULT_PROFILE
    elif rule.has_key("profile"):
        profile = rule["profile"]
    elif rule.has_key("email"):
        profile = get_profile_dir_for_email_address(rule["email"])
    elif rule.has_key("run"):
        open_shell(rule["run"], url)
        return
    else:
        logging.fatal(
            ".openchromerc entry must have either `profile` or `email` entry (rule: %r)",
            rule,
        )
    if profile:
        open_url_in_profile(profile, url)
    else:
        logging.fatal("Unable to find profile for: %r", rule)


def main():
    """Run."""
    logging.basicConfig()  # filename='/tmp/openChrome.log')
    logging.getLogger().setLevel(logging.DEBUG)
    try:
        opts, args = getopt.getopt(sys.argv[1:], "h", "help".split(","))
    except getopt.error as msg:
        usage(1, msg)

    if len(args) != 1:
        usage(1)

    url = args[0]
    for opt, _ in opts:
        if opt in ("-h", "--help"):
            usage(0)

    if not url:
        usage(2, "you must provide a url")

    open_url(url)


def open_shell(cmds, url):
    """Choose a profile to open this url in."""
    cmds = [item % locals() for item in cmds]
    logging.info("Opening: %r", cmds)
    subprocess.Popen(cmds)


if __name__ == "__main__":
    main()
